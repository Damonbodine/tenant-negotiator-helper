
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://izzdyfrcxunfzlfgdjuv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml6emR5ZnJjeHVuZnpsZmdkanV2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMyMDIzMDgsImV4cCI6MjA1ODc3ODMwOH0.rLBqA9Ok3tKPx90Hgvf9bTx0rUjJWcMj2a-SRy_sA8M";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true, // Critical for OAuth redirects
    flowType: 'implicit', // Use implicit flow for OAuth
  },
  global: {
    fetch: (url, options) => {
      // Enhanced fetch with better error handling and logging
      console.log(`Supabase fetch request: ${options?.method || 'GET'} | ${url}`);
      
      return fetch(url, options).then(response => {
        // Log the response status for debugging
        console.log(`Supabase fetch: ${options?.method || 'GET'} | ${response.status} | ${url}`);
        
        // Additional logging for non-200 responses
        if (!response.ok) {
          console.warn(`Supabase non-OK response: ${response.status} | ${url}`);
        }
        
        // Return the response to continue the promise chain
        return response;
      }).catch(error => {
        console.error("Supabase fetch error:", error);
        // Add more detailed error information
        console.error("Request details:", { 
          url, 
          method: options?.method,
          headers: options?.headers
        });
        throw error;
      });
    }
  }
});

// Debug function to check what auth keys are in storage
export const debugAuthStorage = () => {
  console.log("=== Auth Storage Debug ===");
  console.log("Total localStorage items:", localStorage.length);
  
  // Check auth-related items
  const authKeys = Object.keys(localStorage).filter(key => 
    key.startsWith('supabase.auth.') || key.includes('sb-')
  );
  
  console.log("Auth-related keys:", authKeys);
  authKeys.forEach(key => {
    try {
      const value = localStorage.getItem(key);
      console.log(`${key}: ${value?.substring(0, 50)}...`);
    } catch (error) {
      console.log(`Error reading ${key}:`, error);
    }
  });
  
  console.log("=== Auth Storage Debug End ===");
  
  // Return result for potential usage
  return {
    totalItems: localStorage.length,
    authKeys,
  };
};

// Run debug on initialization to help with troubleshooting
debugAuthStorage();
